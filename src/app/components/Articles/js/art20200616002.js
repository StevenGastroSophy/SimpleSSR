const art20200616002 = "# 將 Express server改裝成 React SPA server\n\n現在，我們要用上次做好的 **Express server**來呈現一個 ReactJS的歡迎畫面\n\n---\n\n因為 SPA的 **server side**只會回傳一段基本的 html，所有的內容及操作功能都由 **client side**在頁面上引入 server預先打包好的 `bundle.js`來渲染。所以我們要把 `webpack.config.js`的設定分成兩份:\n* **client**: 跟 `bundle.js`有關的設定，`bundle.js`放在 `專案資料夾/`的 `public`\n* **server**: 跟 `server.js`有關的設定，`server.js`放在 `專案資料夾/`的 `dist`\n\nwebpack.config.js:\n```\nconst path = require('path');\n\nconst client = {\n  devtool: 'source-map',\n  target: 'web',\n  context: path.resolve(__dirname, 'src'),\n  entry: { bundle: './client.js' },\n  output: {\n    publicPath: '/',\n    path: path.resolve(__dirname, 'public'),\n    filename: '[name].js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js?$/,\n        include: path.resolve(__dirname, 'src'),\n        loader: 'babel-loader',\n        query: {\n          plugins: ['transform-decorators-legacy'],\n          presets: ['env', 'react', 'stage-0'],\n        },\n      },\n    ],\n  },\n};\n\nconst server = {\n  devtool: 'source-map',\n  target: 'node',\n  node: {\n    console: false,\n    global: true,\n    process: true,\n    Buffer: true,\n    __filename: 'mock',\n    __dirname: 'mock',\n    setImmediate: true,\n  },\n  context: path.resolve(__dirname, 'src'),\n  entry: { server: './server.js' },\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js?$/,\n        include: path.resolve(__dirname, 'src'),\n        loader: 'babel-loader',\n        query: {\n          plugins: ['transform-decorators-legacy'],\n          presets: ['env', 'react', 'stage-0'],\n        },\n      },\n    ],\n\n  },\n};\n\nmodule.exports = [client, server];\n```\n因為 **client**的 `entry`是 `key-value`的形式，且 key是 bundle，所以 `output.filename`的 `[name].js`就是 `bundle.js`\n\n另外，由於 `bundle.js`是運行在瀏覽器的環境下，所以 **client**的 `target`要設為 `web`\n\n---\n\n## 在`專案資料夾/`新增 `public/`用來放 `bundle.js`以及其他靜態資源:\n\n為了區分靜態資源的性質，在 `public/`新增 `css/`和 `image/`\n\n把 React的 `logo.svg`放到 `image/`\n\n在 `css/`新增 `index.css`和 `App.css`\n\nindex.css:\n```\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n```\nApp.css:\n```\n.App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n![](/static/image/20200611163145.png \"20200611163145\")\n\n---\n\n打開終端機，安裝 `react`及 `react-dom`:\n```\n$ npm install react --save\n$ npm install react-dom --save\n```\n\n---\n\n## 在`src/`新增 `app/containers/`用來放頁面檔案:\n\n在 `containers/`新增 `App.js`:\n```\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      app,\n    } = this.props;\n    const {\n      imageUrl,\n    } = app;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={`${imageUrl}logo.svg`} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n---\n\n## 在 `src/`新增 `client.js`，也就是編譯前的 `bundle.js`:\n```\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './app/containers/App';\n\nconst app = {\n  mainUrl: 'http://localhost:3000/',\n  staticUrl: 'http://localhost:3000/static/',\n  cssUrl: 'http://localhost:3000/static/css/',\n  imageUrl: 'http://localhost:3000/static/image/',\n};\n\nconst component = (\n  <App\n    app={app}\n  />\n);\n\nrender(\n  component,\n  document.getElementById('content'),\n);\n```\n## 在 `containers/`新增 `Html.js`，用來渲染 server side回傳的基本 html:\n```\nimport React, { Component } from 'react';\n\nclass Html extends Component {\n  render() {\n    const {\n      app,\n    } = this.props;\n\n    const {\n      staticUrl,\n      cssUrl,\n    } = app;\n\n    return (\n      <html lang=\"zh-TW\">\n        <head>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <meta httpEquiv=\"x-ua-compatible\" content=\"IE=edge\" />\n          <link rel=\"stylesheet\" href={`${cssUrl}bootstrap.css`} />\n          <link rel=\"stylesheet\" href={`${cssUrl}index.css`} />\n          <link rel=\"stylesheet\" href={`${cssUrl}App.css`} />\n        </head>\n        <body>\n          <div id=\"content\" />\n          <script type=\"text/javascript\" src={`${staticUrl}bundle.js`} />\n        </body>\n      </html>\n    );\n  }\n}\n\nexport default Html;\n```\n裡面包含了 `bundle.js`的引入標籤以及 `bundle.js`的掛載對象 `id=\"content\"`\n\n![](/static/image/20200611173113.png \"20200611173113\")\n\n最後要改的就是 `server.js`，將 `res.send('Hello World');`改成:\n```\n// 將 Html.js在 server side渲染成靜態標籤\napp.use((req, res) => {\n  const urlConfig = {\n    mainUrl: 'http://localhost:3000/',\n    staticUrl: 'http://localhost:3000/static/',\n    cssUrl: 'http://localhost:3000/static/css/',\n    imageUrl: 'http://localhost:3000/static/image/',\n  };\n\n  res.send(`<!doctype html>\\n${renderToStaticMarkup(<Html\n    app={urlConfig}\n  />)}`);\n});\n```\n完整的 `server.js`長這樣:\n```\nimport express from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nimport Html from './app/containers/Html';\n\nconst app = express();\nconst port = 3000;\n\n// 設定靜態資源 router\napp.use('/static', express.static('public'));\n\n// 將 Html.js在 server side渲染成靜態標籤\napp.use((req, res) => {\n  const urlConfig = {\n    mainUrl: 'http://localhost:3000/',\n    staticUrl: 'http://localhost:3000/static/',\n    cssUrl: 'http://localhost:3000/static/css/',\n    imageUrl: 'http://localhost:3000/static/image/',\n  };\n\n  res.send(`<!doctype html>\\n${renderToStaticMarkup(<Html\n    app={urlConfig}\n  />)}`);\n});\n\napp.listen(port, function () {\n  console.log('Express app started on ' + port);\n});\n```\n\n---\n\n最後老樣子:\n```\n$ npm run watch\n$ npm run dev\n```\n打開 `http://localhost:3000/`\n\n## 那麼，如何能知道我們做的是 SPA呢?\n\n打開 chrome的 devtools，切到 `Sources`這個 tab\n\n看到左邊的 `(index)`，裡面應該只有基本的 html (`id=\"content\"`)\n\n![](/static/image/20200611173136.png \"20200611173136\")\n\n因為剩下的內容都是由 `static/bundle.js`渲染出來的!\n\n不過現在我們的 SPA還沒有其他頁面，等我們加上了 `react-router`就可以在 client side做路由切換了。";

export default art20200616002;