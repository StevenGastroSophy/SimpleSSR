const art20200616004 = "# 將 React SPA server改裝成 React SSR server\n\n這次要做 **Server Side Rendering**，我們只要調整 2個檔案就好:\n* **Html.js**: 在 `id=\"content\"`裡面塞入當下的 Route內容\n* **server.js**: 先用 `StaticRouter`找出要渲染的 Route內容，用 `renderToString`轉成字串後傳入 `Html.js`\n\n`Html.js`只需要改這 2段:\n```\nconst {\n  content,\n  app,\n} = this.props;\n\n<div id=\"content\" dangerouslySetInnerHTML={{ __html: content }} />\n```\n`server.js`需要加上這幾段:\n```\n  const context = {};\n  const component = (\n    <StaticRouter\n      location={req.url}\n      context={context}\n    >\n      <App app={urlConfig} />\n    </StaticRouter>\n  );\n  const content = renderToString(component);\n\n  res.send(`<!doctype html>\\n${renderToStaticMarkup(<Html\n    app={urlConfig}\n    content={content}\n  />)}`);\n```\n\n---\n\n**Html.js**:\n```\nimport React, { Component } from 'react';\n\nclass Html extends Component {\n  render() {\n    const {\n      content,\n      app,\n    } = this.props;\n\n    const {\n      staticUrl,\n      cssUrl,\n    } = app;\n\n    return (\n      <html lang=\"zh-TW\">\n        <head>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <meta httpEquiv=\"x-ua-compatible\" content=\"IE=edge\" />\n          <link rel=\"stylesheet\" href={`${cssUrl}bootstrap.css`} />\n          <link rel=\"stylesheet\" href={`${cssUrl}index.css`} />\n          <link rel=\"stylesheet\" href={`${cssUrl}App.css`} />\n        </head>\n        <body>\n          <div id=\"content\" dangerouslySetInnerHTML={{ __html: content }} />\n          <script type=\"text/javascript\" src={`${staticUrl}bundle.js`} />\n        </body>\n      </html>\n    );\n  }\n}\n\nexport default Html;\n```\n**server.js**:\n```\nimport express from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup, renderToString } from 'react-dom/server';\nimport { StaticRouter } from 'react-router-dom';\n\nimport Html from './app/containers/Html';\nimport App from './app/containers/App';\n\nconst app = express();\nconst port = 3000;\n\n// 設定靜態資源 router\napp.use('/static', express.static('public'));\n\n// 將 Html.js在 server side渲染成靜態標籤\napp.use((req, res) => {\n  const urlConfig = {\n    mainUrl: 'http://localhost:3000/',\n    staticUrl: 'http://localhost:3000/static/',\n    cssUrl: 'http://localhost:3000/static/css/',\n    imageUrl: 'http://localhost:3000/static/image/',\n  };\n\n  const context = {};\n  const component = (\n    <StaticRouter\n      location={req.url}\n      context={context}\n    >\n      <App app={urlConfig} />\n    </StaticRouter>\n  );\n  const content = renderToString(component);\n  res.send(`<!doctype html>\\n${renderToStaticMarkup(<Html\n    app={urlConfig}\n    content={content}\n  />)}`);\n});\n\napp.listen(port, function () {\n  console.log('Express app started on ' + port);\n});\n```\n最後:\n```\n$ npm run watch\n$ npm run dev\n```\n打開 `http://localhost:3000/`\n\n---\n\n## 要如何確認 Server side rendering有沒有正常運作呢?\n1. 打開 chrome devtools的 **Network**，記下目前 Html的部分是哪一頁\n2. 點擊按鈕前往下一頁，確認 Network裡的 **Html部分沒有改變**、也 **沒有發出新的 request**\n3. 接著**直接修改 url並按下 enter前往目標頁面**，查看 Network裡的 Html部分會發現**已經變成目標頁面的 Html了**。這就是 Server side rendering!";

export default art20200616004;