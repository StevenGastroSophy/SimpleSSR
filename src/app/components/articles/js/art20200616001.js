const art20200616001 = "# 建立一個 Express server\n\n到 [官方網站](https://nodejs.org/en/download/)下載 NodeJS\n\n開一個`專案資料夾/`\n\n打開終端機:\n```\n$ cd 專案資料夾\n$ npm init\n```\n回答終端機提出的問題，除了 package name以外其他基本上可以跳過\n\n安裝 webpack及 babel:\n```\n$ npm install webpack --save-dev\n$ npm install webpack-cli --save-dev\n\n$ npm install babel-cli --save-dev\n$ npm install babel-core--save-dev\n$ npm install babel-loader@7 --save-dev\n$ npm install babel-plugin-add-module-exports --save-dev\n$ npm install babel-plugin-transform-decorators-legacy --save-dev\n$ npm install babel-plugin-transform-runtime --save-dev\n$ npm install babel-preset-env --save-dev\n$ npm install babel-preset-react --save-dev\n$ npm install babel-preset-stage-0 --save-dev\n```\n或是直接複製下面這段設定到`專案資料夾/`的 `package.json`:\n```\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^6.26.3\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-plugin-add-module-exports\": \"^1.0.2\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.5\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"webpack\": \"^4.43.0\",\n    \"webpack-cli\": \"^3.3.11\"\n  }\n```\n注意 `babel-loader`要指定 8以下的版本，不然會出現:\n```\nError: Cannot find module '@babel/core'\n babel-loader@8 requires Babel 7.x (the package '@babel/core'). If you'd like to use Babel 6.x ('babel-core'), you should install 'babel-loader@7'.\n```\n然後在終端機上輸入:\n```\n$ npm install \n```\n---\n\n安裝 express:\n```\n$ npm install express --save\n```\n在`專案資料夾/`新增 `webpack.config.js`:\n```\nconst path = require('path');\n\nmodule.exports =  {\n  devtool: 'source-map',\n  target: 'node',\n  node: {\n    console: false,\n    global: true,\n    process: true,\n    Buffer: true,\n    __filename: 'mock',\n    __dirname: 'mock',\n    setImmediate: true,\n  },\n  context: path.resolve(__dirname, 'src'),\n  entry: { server: './server.js' },\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js?$/,\n        include: path.resolve(__dirname, 'src'),\n        loader: 'babel-loader',\n        query: {\n          plugins: ['transform-decorators-legacy'],\n          presets: ['env', 'react', 'stage-0'],\n        },\n      },\n    ],\n\n  },\n};\n```\n參數說明:\n* **devtool**: sourcemap生成的[方式](https://webpack.js.org/configuration/devtool/)\n* **target**: 告訴 webpack要以 [哪個環境](https://webpack.js.org/configuration/target/)為目標來編譯\n* **node**: 決定在編譯的時候要對[哪些 NodeJS的全域變數](https://webpack.js.org/configuration/node/)添加 polyfill\n* **context**: 未編譯的 source code資料夾路徑\n* **entry**: 進入的檔案路徑。如果是 `key-value`的形式， `key`會作為接下來 `output.filename`設定裡的 `[name]`變數。\n* **output**: 輸出的資料夾路徑以及檔案名稱\n* **module**: [babel的設定在這裡](https://webpack.js.org/configuration/module/)\n\n![](/static/image/20200611140552.png \"20200611140552\")\n\n---\n\n在`專案資料夾/`新增 `src/`資料夾存放 source code\n\n在 `src/`新增 `server.js`做為 webpack的進入點:\n```\nimport express from 'express';\n\nconst app = express();\nconst port = 3000;\n\napp.get('/', function (req, res, next) {\n  res.send('Hello World');\n});\n\napp.listen(port, function () {\n  console.log('Express app started on ' + port);\n});\n```\n\n---\n\n在`專案資料夾/`新增 `dist/`資料夾做為 webpack的輸出點\n\n![](/static/image/20200611152237.png \"20200611152237\")\n\n---\n\n回到 `package.json`，在 `scripts`新增幾行指令:\n```\n  \"scripts\": {\n    \"watch\": \"webpack --watch --progress\",\n    \"dev\": \"node ./dist/server.js\"\n  }\n```\n這樣所有的設定就大功告成了!\n\n---\n\n打開終端機，輸入:\n```\n$ npm run watch\n$ npm run dev\n```\n看到:\n```\nExpress app started on 3000\n```\n打開 `http://localhost:3000/`就能看到 **Hello World**囉!";

export default art20200616001;